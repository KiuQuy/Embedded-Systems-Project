-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GET_SIGNAL_alarm_signal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    i_weight : IN STD_LOGIC_VECTOR (11 downto 0);
    o_alarm_signal : OUT STD_LOGIC_VECTOR (1 downto 0);
    o_alarm_signal_ap_vld : OUT STD_LOGIC );
end;


architecture behav of GET_SIGNAL_alarm_signal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv12_7D0 : STD_LOGIC_VECTOR (11 downto 0) := "011111010000";
    constant ap_const_lv12_1F4 : STD_LOGIC_VECTOR (11 downto 0) := "000111110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln895_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm <= ap_ST_fsm_state1;
    ap_CS_fsm_state1 <= ap_ST_fsm_state1(0);
    icmp_ln887_fu_118_p2 <= "1" when (unsigned(i_weight) < unsigned(ap_const_lv12_1F4)) else "0";
    icmp_ln895_fu_112_p2 <= "1" when (unsigned(i_weight) > unsigned(ap_const_lv12_7D0)) else "0";

    o_alarm_signal_assign_proc : process(ap_CS_fsm_state1, icmp_ln895_fu_112_p2, icmp_ln887_fu_118_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((icmp_ln895_fu_112_p2 = ap_const_lv1_1)) then 
                o_alarm_signal <= ap_const_lv2_2;
            elsif (((icmp_ln887_fu_118_p2 = ap_const_lv1_1) and (icmp_ln895_fu_112_p2 = ap_const_lv1_0))) then 
                o_alarm_signal <= ap_const_lv2_1;
            elsif (((icmp_ln887_fu_118_p2 = ap_const_lv1_0) and (icmp_ln895_fu_112_p2 = ap_const_lv1_0))) then 
                o_alarm_signal <= ap_const_lv2_0;
            else 
                o_alarm_signal <= "XX";
            end if;
        else 
            o_alarm_signal <= "XX";
        end if; 
    end process;


    o_alarm_signal_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln895_fu_112_p2, icmp_ln887_fu_118_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln895_fu_112_p2 = ap_const_lv1_1)) or ((icmp_ln887_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln895_fu_112_p2 = ap_const_lv1_0)) or ((icmp_ln887_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln895_fu_112_p2 = ap_const_lv1_0)))) then 
            o_alarm_signal_ap_vld <= ap_const_logic_1;
        else 
            o_alarm_signal_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
